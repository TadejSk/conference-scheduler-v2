"""
    def fit_to_schedule(self):
        """
    #Assigns papers to clusters based on the self.cluster_distances obtained from the basic_clustering function
    #Uses an iterative approach, where the biggest empty slot on the schedule is filled first, followed by the next
    #biggest one, and so on until is no more papers that fit in the remaing empty time

    #Possible imporovements:
    #    Should clustering be rerun after every slot is filled?
    #    Is there a better clustering algorithm?
    #    Is this iterative aproach even a good idea?
    """
        # Every paper should first have it's cluster and add_to_X fields reset
        self.slots = []
        self.simple_get_slots()
        for paper in self.papers:
            paper.paper.add_to_day = -1
            paper.paper.add_to_row = -1
            paper.paper.add_to_col = -1
            paper.paper.cluster = 0
            paper.paper.save()
        # The following is repeated for every cluster independently
        # Slot lengths are initialized in __init__
        while self.slots != []:
            # Get biggest empty slot
            slot_length = 0
            slot_index = 0
            for index,slot in enumerate(self.slots):
                if slot.length > slot_length:
                    slot_length = slot.length
                    slot_index = index
            # Select biggest cluster
            cluster_values = [paper.cluster for paper in self.papers]
            cluster_sizes = [cluster_values.count(i) for i in range(0, len(self.slots))]
            max_cluster = cluster_sizes.index(max(cluster_sizes))
            # Get papers from that cluster
            cluster_papers = [p for p in self.papers if p.cluster == max_cluster]
            # Select papers that fit into the slot
            papers = []
            print("CLUSTER PAPERS:", cluster_papers)
            print("SLOT LEN:", slot_length)
            self.find_papers_with_sum(cluster_papers, [], slot_length, 0, papers)
            if papers == []:
                # This happens when there are no papers, that can completely fill a slot in the largest cluster.
                # In this case, it makes sense to rerun clustering with less clusters, as that should produce clusters
                #   with more papers.
                # If even that doesnt help, then the function should end end report this to the user
                print("NO SUITABLE COMBINATION FOUND")
            else:
                # if there are multiple fitting groups in the same cluster, select the group with the smallest error
                selected_index = 0
                if len(papers) > 1:
                    min_error = 9999999999999
                    for index,subset in enumerate(papers):
                        error = 0
                        for paper in subset:
                            error += self.papers[paper].cluster_distances[max_cluster]*self.papers[paper].cluster_distances[max_cluster]
                        if error < min_error:
                            selected_index = index
                            min_error = error
            # Update the papers' add_to_day/row/col fields. This fields will then be used to add the papers into the schedule
            # Also update the papers' cluster field
            ids = [self.papers[i].paper.id for i in papers[selected_index]]
            papers_to_update = [(self.papers[i],i) for i in papers[selected_index]]
            #print("PAPERS TO UPATE: ", papers_to_update)
            for paper, index in papers_to_update:
                paper.paper.cluster = self.current_cluster
                coords = self.slots[slot_index].coords
                paper.paper.add_to_day = coords[0]
                paper.paper.add_to_row = coords[1]
                paper.paper.add_to_col = coords[2]
                #print("COORD ",  index, self.visual_coords_x[index], self.visual_coords_y[index])
                paper.paper.visul_x = paper.coord_x
                paper.paper.visual_y = paper.coord_y
                paper.paper.save()
            self.current_cluster += 1
            # remove the assigned papers from this class, since they no longer need to be assigned
            for paper, index in papers_to_update:
                self.papers.remove(paper)
            # also remove the information about the slot
            del self.slots[slot_index]
            # redo clustering
            self.create_dataset()
            self.basic_clustering()
        # Return the cluster coordinates - used for visualization
        self.get_coords()
    """